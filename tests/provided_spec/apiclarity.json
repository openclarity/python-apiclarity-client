{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "APIClarity APIs"
  },
  "paths": {
    "/features": {
      "get": {
        "summary": "Get the list of APIClarity features and for each feature the list of API hosts (in the form 'host:port') the feature requires to get trace for",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIClarityFeatureList"
                }
              }
            }
          }
        }
      }
    },
    "/apiEvents": {
      "get": {
        "summary": "Get API events",
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/apiEventSortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/showNonApi"
          },
          {
            "$ref": "#/components/parameters/apiInfoIdIsFilter"
          },
          {
            "$ref": "#/components/parameters/methodIsFilter"
          },
          {
            "$ref": "#/components/parameters/pathIsFilter"
          },
          {
            "$ref": "#/components/parameters/pathIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/pathStartsWithFilter"
          },
          {
            "$ref": "#/components/parameters/pathEndsWithFilter"
          },
          {
            "$ref": "#/components/parameters/pathContainsFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeIsFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeGteFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeLteFilter"
          },
          {
            "$ref": "#/components/parameters/sourceIPIsFilter"
          },
          {
            "$ref": "#/components/parameters/sourceIPIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/destinationIPIsFilter"
          },
          {
            "$ref": "#/components/parameters/destinationIPIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/destinationPortIsFilter"
          },
          {
            "$ref": "#/components/parameters/destinationPortIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/hasSpecDiffFilter"
          },
          {
            "$ref": "#/components/parameters/specDiffTypeIsFilter"
          },
          {
            "$ref": "#/components/parameters/specIsFilter"
          },
          {
            "$ref": "#/components/parameters/specIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/specStartsWithFilter"
          },
          {
            "$ref": "#/components/parameters/specEndsWithFilter"
          },
          {
            "$ref": "#/components/parameters/specContainsFilter"
          },
          {
            "$ref": "#/components/parameters/alertIsFilter"
          },
          {
            "$ref": "#/components/parameters/alertIsType"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total"
                  ],
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total events count in the given time range and filters"
                    },
                    "items": {
                      "type": "array",
                      "description": "List of API events in the given time range, filters and page. List length must be lower or equal to pageSize",
                      "items": {
                        "$ref": "#/components/schemas/ApiEvent"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiEvents/{eventId}": {
      "get": {
        "summary": "Get API event",
        "parameters": [
          {
            "name": "eventId",
            "description": "API event ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEvent"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiEvents/{eventId}/reconstructedSpecDiff": {
      "get": {
        "summary": "Get API event reconstructed spec diff",
        "parameters": [
          {
            "name": "eventId",
            "description": "API event ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEventSpecDiff"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiEvents/{eventId}/providedSpecDiff": {
      "get": {
        "summary": "Get API event provided spec diff",
        "parameters": [
          {
            "name": "eventId",
            "description": "API event ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEventSpecDiff"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory": {
      "get": {
        "summary": "Get API inventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiType"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/apiInventorySortKey"
          },
          {
            "$ref": "#/components/parameters/sortDir"
          },
          {
            "$ref": "#/components/parameters/apiNameIsFilter"
          },
          {
            "$ref": "#/components/parameters/apiNameIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/apiNameStartsWithFilter"
          },
          {
            "$ref": "#/components/parameters/apiNameEndsWithFilter"
          },
          {
            "$ref": "#/components/parameters/apiNameContainsFilter"
          },
          {
            "$ref": "#/components/parameters/portIsFilter"
          },
          {
            "$ref": "#/components/parameters/portIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/hasProvidedSpecFilter"
          },
          {
            "$ref": "#/components/parameters/hasReconstructedSpecFilter"
          },
          {
            "$ref": "#/components/parameters/apiIdFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total"
                  ],
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total filtered APIs count"
                    },
                    "items": {
                      "type": "array",
                      "description": "List of filtered APIs in the given page. List length must be lower or equal to pageSize",
                      "items": {
                        "$ref": "#/components/schemas/ApiInfo"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      },
      "post": {
        "summary": "Create API inventory item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiInfoWithType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInfo"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/dashboard/apiUsage": {
      "get": {
        "summary": "Get API usage",
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUsages"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/dashboard/apiUsage/mostUsed": {
      "get": {
        "summary": "Get most used APIs",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiCount"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/dashboard/apiUsage/latestDiffs": {
      "get": {
        "summary": "Get latest spec diffs",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpecDiffTime"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs": {
      "get": {
        "summary": "Get provided and reconstructed open api specs for a specific API",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenApiSpecs"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs/providedSpec": {
      "put": {
        "summary": "Add or edit a spec for a specific API",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rawSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rawSpec"
                }
              }
            }
          },
          "400": {
            "description": "Spec validation failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      },
      "delete": {
        "summary": "Unset a provided spec for a specific API",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/specs/reconstructedSpec": {
      "delete": {
        "summary": "Unset a reconstructed spec for a specific API",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/reconstructed_swagger.json": {
      "get": {
        "summary": "Get reconstructed API spec json file",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "spec in json format",
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/apiInfo": {
      "get": {
        "summary": "Get api info from apiId",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInfoWithType"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/apiId/fromHostAndPort": {
      "get": {
        "summary": "Get apiId from host and port",
        "parameters": [
          {
            "$ref": "#/components/parameters/host"
          },
          {
            "$ref": "#/components/parameters/port"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "api id",
                  "type": "integer",
                  "format": "uint32"
                }
              }
            }
          },
          "404": {
            "description": "API ID Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/provided_swagger.json": {
      "get": {
        "summary": "Get provided API spec json file",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "spec in json format",
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiUsage/hitCount": {
      "get": {
        "summary": "Get a hit count within a selected timeframe for the filtered API events",
        "parameters": [
          {
            "$ref": "#/components/parameters/startTime"
          },
          {
            "$ref": "#/components/parameters/endTime"
          },
          {
            "$ref": "#/components/parameters/showNonApi"
          },
          {
            "$ref": "#/components/parameters/methodIsFilter"
          },
          {
            "$ref": "#/components/parameters/providedPathIDIsFilter"
          },
          {
            "$ref": "#/components/parameters/reconstructedPathIDIsFilter"
          },
          {
            "$ref": "#/components/parameters/pathIsFilter"
          },
          {
            "$ref": "#/components/parameters/pathIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/pathStartsWithFilter"
          },
          {
            "$ref": "#/components/parameters/pathEndsWithFilter"
          },
          {
            "$ref": "#/components/parameters/pathContainsFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeIsFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeGteFilter"
          },
          {
            "$ref": "#/components/parameters/statusCodeLteFilter"
          },
          {
            "$ref": "#/components/parameters/sourceIPIsFilter"
          },
          {
            "$ref": "#/components/parameters/sourceIPIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/destinationIPIsFilter"
          },
          {
            "$ref": "#/components/parameters/destinationIPIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/destinationPortIsFilter"
          },
          {
            "$ref": "#/components/parameters/destinationPortIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/hasSpecDiffFilter"
          },
          {
            "$ref": "#/components/parameters/specDiffTypeIsFilter"
          },
          {
            "$ref": "#/components/parameters/specIsFilter"
          },
          {
            "$ref": "#/components/parameters/specIsNotFilter"
          },
          {
            "$ref": "#/components/parameters/specStartsWithFilter"
          },
          {
            "$ref": "#/components/parameters/specEndsWithFilter"
          },
          {
            "$ref": "#/components/parameters/specContainsFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HitCount"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{apiId}/suggestedReview": {
      "get": {
        "summary": "Get reconstructed spec for review",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestedReview"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/apiInventory/{reviewId}/approvedReview": {
      "post": {
        "summary": "Apply the approved review to create the reconstructed spec",
        "parameters": [
          {
            "$ref": "#/components/parameters/reviewId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedReview"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/control/newDiscoveredAPIs": {
      "post": {
        "summary": "Allows a client to notify APIClarity about new APIs.",
        "description": "This allows a client (a gateway for example) to notify APIclarity about newly discovered APIs. If one of the APIs already exists, it is ignored.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "hosts"
                ],
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "Optional name identifying the entity sending this notification."
                  },
                  "hosts": {
                    "type": "array",
                    "description": "List of discovered APIs, format of hostname:port",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/control/gateways": {
      "get": {
        "summary": "List of configured gateways",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "gateways"
                  ],
                  "properties": {
                    "gateways": {
                      "type": "array",
                      "description": "List of gateways",
                      "items": {
                        "$ref": "#/components/schemas/APIGateway"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      },
      "post": {
        "summary": "Create a new gateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a new gateway",
                "$ref": "#/components/schemas/APIGateway"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIGateway"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    },
    "/control/gateways/{gatewayId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/gatewayId"
        }
      ],
      "get": {
        "summary": "Get gateway information",
        "responses": {
          "200": {
            "description": "Gateway information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIGateway"
                }
              }
            }
          },
          "404": {
            "description": "API Gateway not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      },
      "delete": {
        "summary": "Delete a gateway",
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "API Gateway not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "components": {
    "parameters": {
      "Sensitive": {
        "name": "sensitive",
        "description": "Should findings include sensitive data ?",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "startTime": {
        "name": "startTime",
        "description": "Start time of the query",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "endTime": {
        "name": "endTime",
        "description": "End time of the query",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "page": {
        "name": "page",
        "description": "Page number of the query",
        "in": "query",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "apiIdFilter": {
        "name": "apiId",
        "description": "api id to return",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "pageSize": {
        "name": "pageSize",
        "description": "Maximum items to return",
        "in": "query",
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50
        }
      },
      "sortDir": {
        "name": "sortDir",
        "description": "Sorting direction",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ],
          "default": "ASC"
        }
      },
      "apiEventSortKey": {
        "name": "sortKey",
        "description": "Sort key",
        "in": "query",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ApiEventSortKey"
        }
      },
      "apiInventorySortKey": {
        "name": "sortKey",
        "description": "Sort key",
        "in": "query",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ApiInventorySortKey"
        }
      },
      "apiType": {
        "name": "type",
        "description": "API type [INTERNAL or EXTERNAL]",
        "in": "query",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ApiTypeEnum"
        }
      },
      "showNonApi": {
        "name": "showNonApi",
        "in": "query",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "apiInfoIdIsFilter": {
        "name": "apiInfoId[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "methodIsFilter": {
        "name": "method[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/HttpMethod"
          }
        }
      },
      "providedPathIDIsFilter": {
        "name": "providedPathID[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "reconstructedPathIDIsFilter": {
        "name": "reconstructedPathID[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "pathIsFilter": {
        "name": "path[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "pathIsNotFilter": {
        "name": "path[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "pathStartsWithFilter": {
        "name": "path[start]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "pathEndsWithFilter": {
        "name": "path[end]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "pathContainsFilter": {
        "name": "path[contains]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "statusCodeIsFilter": {
        "name": "statusCode[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "statusCodeIsNotFilter": {
        "name": "statusCode[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "statusCodeGteFilter": {
        "name": "statusCode[gte]",
        "description": "greater than or equal",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "statusCodeLteFilter": {
        "name": "statusCode[lte]",
        "description": "less than or equal",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sourceIPIsFilter": {
        "name": "sourceIP[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "sourceIPIsNotFilter": {
        "name": "sourceIP[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "destinationIPIsFilter": {
        "name": "destinationIP[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "destinationIPIsNotFilter": {
        "name": "destinationIP[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "destinationPortIsFilter": {
        "name": "destinationPort[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "destinationPortIsNotFilter": {
        "name": "destinationPort[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "hasSpecDiffFilter": {
        "name": "hasSpecDiff[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "specDiffTypeIsFilter": {
        "name": "specDiffType[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/DiffType"
          }
        }
      },
      "specIsFilter": {
        "name": "spec[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "specIsNotFilter": {
        "name": "spec[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "specStartsWithFilter": {
        "name": "spec[start]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "specEndsWithFilter": {
        "name": "spec[end]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "specContainsFilter": {
        "name": "spec[contains]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "apiNameIsFilter": {
        "name": "name[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "apiNameIsNotFilter": {
        "name": "name[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "apiNameStartsWithFilter": {
        "name": "name[start]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "apiNameEndsWithFilter": {
        "name": "name[end]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "apiNameContainsFilter": {
        "name": "name[contains]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "portIsFilter": {
        "name": "port[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "portIsNotFilter": {
        "name": "port[isNot]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "hasProvidedSpecFilter": {
        "name": "hasProvidedSpec[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "hasReconstructedSpecFilter": {
        "name": "hasReconstructedSpec[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "port": {
        "name": "port",
        "description": "api port",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "host": {
        "name": "host",
        "description": "api host name",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "alertIsFilter": {
        "name": "alert[is]",
        "in": "query",
        "description": "Alert Kind [ALERT_INFO or ALERT_WARN]",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AlertSeverityEnum"
          }
        }
      },
      "alertIsType": {
        "name": "alertType[is]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "apiId": {
        "name": "apiId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "reviewId": {
        "name": "reviewId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint32"
        }
      },
      "gatewayId": {
        "name": "gatewayId",
        "in": "path",
        "description": "Gateway ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      }
    },
    "responses": {
      "UnknownError": {
        "description": "unknown error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponse"
            }
          }
        }
      }
    },
    "schemas": {
      "APIClarityFeatureList": {
        "type": "object",
        "description": "List of APIClarity features and for each feature the list of API hosts (in the form 'host:port') the feature requires to get trace for",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIClarityFeature"
            }
          }
        }
      },
      "APIClarityFeature": {
        "type": "object",
        "description": "Description of APIClarity feature and the list of API hosts (in the form 'host:port') the feature requires to get trace for",
        "properties": {
          "featureName": {
            "$ref": "#/components/schemas/APIClarityFeatureEnum"
          },
          "featureDescription": {
            "description": "Short human readable description of the feature",
            "type": "string"
          },
          "hostsToTrace": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "featureName"
        ]
      },
      "APIClarityFeatureEnum": {
        "description": "APIClarity Feature Name",
        "type": "string",
        "enum": [
          "specreconstructor",
          "specdiffs"
        ]
      },
      "APIGateway": {
        "description": "Gateway which is externally exposing APIs",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "description": "Unique name identifying a gateway",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/APIGatewayType"
          },
          "description": {
            "type": "string"
          },
          "token": {
            "type": "string",
            "format": "byte"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "APIGatewayType": {
        "type": "string",
        "enum": [
          "TYK",
          "KONG",
          "APIGEEX"
        ]
      },
      "APIFindings": {
        "description": "A group of findings",
        "type": "object",
        "properties": {
          "items": {
            "description": "A list of findings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIFinding"
            }
          }
        }
      },
      "APIFinding": {
        "description": "An API Finding",
        "type": "object",
        "required": [
          "type",
          "source",
          "name",
          "description",
          "severity"
        ],
        "properties": {
          "type": {
            "description": "Type of the finding",
            "type": "string",
            "example": "WEAK_JWT"
          },
          "source": {
            "description": "Name of the module which created this finding",
            "type": "string",
            "example": "traceanalyzer"
          },
          "name": {
            "description": "Human readable name of the finding",
            "type": "string",
            "example": "Weak JSON Web Token"
          },
          "description": {
            "description": "Human readable description of the finding",
            "type": "string",
            "example": "A weak JSON Web Token has been detected"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "reconstructed_spec_location": {
            "description": "JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901. If at the time of creation of the finding, there is no specification, then this field is an empty string.",
            "type": "string",
            "example": "#/paths/~1blogs~1{blog_id}~1new~0posts"
          },
          "provided_spec_location": {
            "description": "JSON pointer to the location of the finding in the specification. See https://datatracker.ietf.org/doc/html/rfc6901. If at the time of creation of the finding, there is no specification, then this field is an empty string.",
            "type": "string",
            "example": "#/paths/~1blogs~1{blog_id}~1new~0posts"
          },
          "additional_info": {
            "description": "Could be any opaque JSON object",
            "type": "object",
            "example": {
              "key_len": 12
            }
          }
        }
      },
      "ApiResponse": {
        "description": "An object that is returned in all cases of failures",
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "SpecType": {
        "enum": [
          "NONE",
          "PROVIDED",
          "RECONSTRUCTED"
        ],
        "type": "string"
      },
      "Severity": {
        "description": "Severity of a finding",
        "type": "string",
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL",
          "INFO"
        ],
        "example": "HIGH"
      },
      "BaseNotification": {
        "description": "Base Notification all APIClarity notifications must extend",
        "type": "object",
        "properties": {
          "notificationType": {
            "type": "string"
          }
        },
        "required": [
          "notificationType"
        ]
      },
      "ModuleVersion": {
        "type": "object",
        "required": [
          "version"
        ],
        "properties": {
          "version": {
            "type": "string"
          }
        }
      },
      "ApiFindingsNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNotification"
          },
          {
            "$ref": "#/components/schemas/APIFindings"
          }
        ]
      },
      "ApiEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32"
          },
          "requestTime": {
            "type": "string",
            "format": "date-time"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "path": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          },
          "sourceIP": {
            "type": "string"
          },
          "destinationIP": {
            "type": "string"
          },
          "destinationPort": {
            "type": "integer"
          },
          "hasReconstructedSpecDiff": {
            "type": "boolean",
            "default": false
          },
          "hasProvidedSpecDiff": {
            "type": "boolean",
            "default": false
          },
          "specDiffType": {
            "$ref": "#/components/schemas/DiffType"
          },
          "hostSpecName": {
            "type": "string"
          },
          "apiInfoId": {
            "type": "integer",
            "description": "hold the relevant api spec info id",
            "format": "uint32"
          },
          "apiType": {
            "$ref": "#/components/schemas/ApiTypeEnum"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleAlert"
            }
          }
        }
      },
      "ApiEventSpecDiff": {
        "type": "object",
        "required": [
          "oldSpec",
          "newSpec"
        ],
        "properties": {
          "diffType": {
            "$ref": "#/components/schemas/DiffType"
          },
          "oldSpec": {
            "description": "Old spec json string",
            "type": "string"
          },
          "newSpec": {
            "description": "New spec json string",
            "type": "string"
          }
        }
      },
      "ApiInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32"
          },
          "name": {
            "description": "API name",
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "hasReconstructedSpec": {
            "type": "boolean",
            "default": false
          },
          "hasProvidedSpec": {
            "type": "boolean",
            "default": false
          },
          "destinationNamespace": {
            "type": "string"
          }
        }
      },
      "ApiInfoWithType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiInfo"
          },
          {
            "properties": {
              "apiType": {
                "$ref": "#/components/schemas/ApiTypeEnum"
              }
            }
          }
        ]
      },
      "ApiUsages": {
        "type": "object",
        "properties": {
          "existingApis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUsage"
            }
          },
          "newApis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUsage"
            }
          },
          "apisWithDiff": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUsage"
            }
          }
        }
      },
      "ApiUsage": {
        "type": "object",
        "properties": {
          "numOfCalls": {
            "type": "integer",
            "x-omitempty": false
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiCount": {
        "type": "object",
        "properties": {
          "apiInfoId": {
            "type": "integer",
            "description": "hold the relevant api info id",
            "format": "uint32"
          },
          "apiType": {
            "$ref": "#/components/schemas/ApiTypeEnum"
          },
          "numCalls": {
            "type": "integer"
          },
          "apiHostName": {
            "type": "string"
          },
          "apiPort": {
            "type": "integer"
          }
        }
      },
      "SpecDiffTime": {
        "type": "object",
        "properties": {
          "apiEventId": {
            "type": "integer",
            "format": "uint32"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "apiHostName": {
            "type": "string"
          },
          "diffType": {
            "$ref": "#/components/schemas/DiffType"
          }
        }
      },
      "HttpMethod": {
        "type": "string",
        "enum": [
          "GET",
          "HEAD",
          "POST",
          "PUT",
          "DELETE",
          "CONNECT",
          "OPTIONS",
          "TRACE",
          "PATCH"
        ]
      },
      "ApiTypeEnum": {
        "type": "string",
        "enum": [
          "INTERNAL",
          "EXTERNAL"
        ]
      },
      "DiffType": {
        "type": "string",
        "default": "NO_DIFF",
        "enum": [
          "ZOMBIE_DIFF",
          "SHADOW_DIFF",
          "GENERAL_DIFF",
          "NO_DIFF"
        ]
      },
      "ApiInventorySortKey": {
        "type": "string",
        "enum": [
          "name",
          "port",
          "hasReconstructedSpec",
          "hasProvidedSpec"
        ]
      },
      "ApiEventSortKey": {
        "type": "string",
        "enum": [
          "time",
          "method",
          "path",
          "statusCode",
          "sourceIP",
          "destinationIP",
          "destinationPort",
          "specDiffType",
          "hostSpecName",
          "apiType"
        ]
      },
      "SuccessResponse": {
        "description": "An object that is return in cases of success that return nothing.",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "OpenApiSpecs": {
        "description": "An object representing the provided and reconstructed API specs",
        "type": "object",
        "properties": {
          "providedSpec": {
            "$ref": "#/components/schemas/SpecInfo"
          },
          "reconstructedSpec": {
            "$ref": "#/components/schemas/SpecInfo"
          }
        }
      },
      "SpecInfo": {
        "description": "An object containing info about a spec",
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpecTag"
            }
          }
        }
      },
      "rawSpec": {
        "description": "spec in json or yaml format",
        "type": "object",
        "properties": {
          "rawSpec": {
            "type": "string",
            "description": "spec in json or yaml format"
          }
        }
      },
      "SpecTag": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "methodAndPathList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodAndPath"
            }
          }
        }
      },
      "MethodAndPath": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "pathId": {
            "type": "string",
            "format": "uuid"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          }
        }
      },
      "HitCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "x-omitempty": false
          },
          "time": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SuggestedReview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32"
          },
          "reviewPathItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewPathItem"
            }
          }
        }
      },
      "ReviewPathItem": {
        "type": "object",
        "properties": {
          "suggestedPath": {
            "description": "Represents the parameterized path suggested by the engine",
            "type": "string"
          },
          "apiEventsPaths": {
            "description": "Group of api event paths (original) that suggestedPath is representing",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiEventPathAndMethods"
            }
          }
        }
      },
      "ApiEventPathAndMethods": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HttpMethod"
            }
          }
        }
      },
      "ApprovedReview": {
        "type": "object",
        "properties": {
          "reviewPathItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewPathItem"
            }
          }
        }
      },
      "AlertSeverityEnum": {
        "type": "string",
        "enum": [
          "ALERT_INFO",
          "ALERT_WARN",
          "ALERT_CRITICAL"
        ]
      },
      "ModuleAlert": {
        "type": "object",
        "properties": {
          "moduleName": {
            "description": "Name of the module which created this alert",
            "type": "string"
          },
          "reason": {
            "description": "Optional description of reason of the alert",
            "type": "string"
          },
          "alert": {
            "$ref": "#/components/schemas/AlertSeverityEnum"
          }
        }
      },
      "ApiID": {
        "type": "integer",
        "format": "int64"
      }
    }
  }
}
